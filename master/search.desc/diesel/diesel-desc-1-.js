searchState.loadedDescShard("diesel", 1, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPossible values for <code>SqlType::IsNullable</code>\nFetch the metadata for the given type\nRepresents the output of numeric operators in SQL\nRepresents the output type of <code>AllAreNullable</code> for two given …\nYes, this type can be null\nRepresents the output type of <code>OneIsNullable</code> for two given …\nRepresents if the SQL type is nullable or not\nRepresents the output type of <code>MaybeNullableType</code>\nNo, this type cannot be null as it is marked as <code>NOT NULL</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents SQL types which can be added.\nRepresents SQL types which can be divided.\nRepresents SQL types which can be multiplied.\nThe SQL type of the result of adding <code>Rhs</code> to <code>Self</code>\nThe SQL type of the result of subtracting <code>Rhs</code> from <code>Self</code>\nThe SQL type of the result of multiplying <code>Self</code> by <code>Rhs</code>\nThe SQL type of the result of dividing <code>Self</code> by <code>Rhs</code>\nThe SQL type which can be added to this one\nThe SQL type which can be subtracted from this one\nThe SQL type which this can be multiplied by\nThe SQL type which this one can be divided by\nRepresents SQL types which can be subtracted.\nBind using <code>sqlite3_bind_blob</code>\n<code>bytes</code> should contain an <code>f64</code>\n<code>bytes</code> should contain an <code>f32</code>\n<code>bytes</code> should contain an <code>i32</code>\n<code>bytes</code> should contain an <code>i64</code>\nThe result type of the SQLite aggregate function\n<code>SerializedDatabase</code> is a wrapper for a serialized database …\n<code>bytes</code> should contain an <code>i16</code>\nThe SQLite backend\nTrait for the implementation of a SQLite aggregate function\nThis type represents a value bound to a sqlite prepared …\nConnections for the SQLite backend. Unlike other backends, …\nDetermines how a bind parameter is given to SQLite\nRaw sqlite value as received from the database\nBind using <code>sqlite3_bind_text</code>\nReturns a slice of the serialized database.\nDeserialize an SQLite database from a byte buffer.\nDeallocates the memory of the serialized database when it …\nEstablish a connection to the database specified by …\nRun a transaction with <code>BEGIN EXCLUSIVE</code>\nSqlite related query builder extensions.\nAfter the last row has been processed, the <code>finalize()</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRun a transaction with <code>BEGIN IMMEDIATE</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe SQLite query builder\nRegister a collation function.\nSerialize the current SQLite database into a byte buffer.\nSQLite specific sql types\nThe <code>step()</code> method is called once for every record of the …\nGet the type of the value as returned by sqlite\nSQLite specific expression DSL methods.\nSQLite specific functions\nVerifies that its argument is a valid JSON string or JSONB …\nThe return type of <code>json()</code>\nConverts the given json value to pretty-printed, indented …\nThe return type of <code>json_pretty()</code>\nConverts the given json value to pretty-printed, indented …\nThe return type of <code>json_pretty_with_indentation()</code>\nThe jsonb(X) function returns the binary JSONB …\nThe return type of <code>jsonb()</code>\nVerifies that its argument is a valid JSON string or JSONB …\nThe return type of <code>json()</code>\nConverts the given json value to pretty-printed, indented …\nThe return type of <code>json_pretty()</code>\nConverts the given json value to pretty-printed, indented …\nThe return type of <code>json_pretty_with_indentation()</code>\nThe jsonb(X) function returns the binary JSONB …\nThe return type of <code>jsonb()</code>\nConstructs SQL queries for use with the SQLite backend\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new query builder with an empty query\nThe SQLite timestamp with time zone type\nInterface to add information to conflict targets. Designed …\nOutput type of filter_target operation\nA partially constructed <code>ON CONFLICT DO UPDATE</code> clause.\nA partially constructed <code>ON CONFLICT</code> clause.\nCreates a query with <code>ON CONFLICT (target) DO NOTHING</code>\nUsed to create a query in the form …\nRepresents <code>excluded.column</code> in an <code>ON CONFLICT DO UPDATE</code> …\nequivalent to filter of FilterDsl but aimed at conflict …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to specify the constraint name for an upsert …\nSee <code>do_update</code> for usage examples.")