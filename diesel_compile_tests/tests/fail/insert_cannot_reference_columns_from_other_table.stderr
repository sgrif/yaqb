error[E0271]: type mismatch resolving `<id as Column>::Source == table`
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:22:18
   |
22 |         .values(&posts::id.eq(1));
   |          ------  ^^^^^^^^^^^^^^^ type mismatch resolving `<id as Column>::Source == table`
   |          |
   |          required by a bound introduced by this call
   |
note: expected this to be `users::table`
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:14:9
   |
14 |         id -> Integer,
   |         ^^
   = note: `posts::table` and `users::table` have similar names, but are actually distinct types
note: `posts::table` is defined in module `crate::posts` of the current crate
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:12:1
   |
12 | / table! {
13 | |     posts {
14 | |         id -> Integer,
15 | |     }
16 | | }
   | |_^
note: `users::table` is defined in module `crate::users` of the current crate
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:6:1
   |
6  | / table! {
7  | |     users {
8  | |         id -> Integer,
9  | |     }
10 | | }
   | |_^
   = note: required for `&diesel::expression::operators::Eq<posts::columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>` to implement `diesel::Insertable<users::table>`
   = note: 1 redundant requirement hidden
   = note: required for `&Grouped<Eq<id, Bound<Integer, i32>>>` to implement `diesel::Insertable<users::table>`
note: required by a bound in `IncompleteInsertStatement::<T, Op>::values`
  --> $DIESEL/src/query_builder/insert_statement/mod.rs
   |
   |     pub fn values<U>(self, records: U) -> InsertStatement<T, U::Values, Op>
   |            ------ required by a bound in this associated function
   |     where
   |         U: Insertable<T>,
   |            ^^^^^^^^^^^^^ required by this bound in `IncompleteInsertStatement::<T, Op>::values`
   = note: consider using `--verbose` to print the full type name to the console
   = note: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0271]: type mismatch resolving `<&Grouped<Eq<id, Bound<Integer, i32>>> as Insertable<table>>::Values == ValuesClause<ColumnInsertValue<id, &Bound<Integer, i32>>, table>`
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:25:10
   |
25 |         .values(&(posts::id.eq(1), users::id.eq(2)));
   |          ^^^^^^ expected `posts::table`, found `users::table`
   |
   = note: `users::table` and `posts::table` have similar names, but are actually distinct types
note: `users::table` is defined in module `crate::users` of the current crate
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:6:1
   |
6  | / table! {
7  | |     users {
8  | |         id -> Integer,
9  | |     }
10 | | }
   | |_^
note: `posts::table` is defined in module `crate::posts` of the current crate
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:12:1
   |
12 | / table! {
13 | |     posts {
14 | |         id -> Integer,
15 | |     }
16 | | }
   | |_^
   = note: required for `(&Grouped<Eq<id, Bound<Integer, i32>>>, &Grouped<Eq<id, Bound<Integer, i32>>>)` to implement `diesel::Insertable<users::table>`
   = note: consider using `--verbose` to print the full type name to the console
   = note: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0271]: type mismatch resolving `<&Grouped<Eq<id, Bound<Integer, i32>>> as Insertable<table>>::Values == ValuesClause<ColumnInsertValue<id, &Bound<Integer, i32>>, table>`
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:25:18
   |
25 |         .values(&(posts::id.eq(1), users::id.eq(2)));
   |          ------  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `users::table`, found `posts::table`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `posts::table` and `users::table` have similar names, but are actually distinct types
note: `posts::table` is defined in module `crate::posts` of the current crate
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:12:1
   |
12 | / table! {
13 | |     posts {
14 | |         id -> Integer,
15 | |     }
16 | | }
   | |_^
note: `users::table` is defined in module `crate::users` of the current crate
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:6:1
   |
6  | / table! {
7  | |     users {
8  | |         id -> Integer,
9  | |     }
10 | | }
   | |_^
   = note: required for `(&Grouped<Eq<id, Bound<Integer, i32>>>, &Grouped<Eq<id, Bound<Integer, i32>>>)` to implement `diesel::Insertable<users::table>`
   = note: 1 redundant requirement hidden
   = note: required for `&(Grouped<Eq<id, Bound<Integer, i32>>>, Grouped<Eq<id, Bound<Integer, i32>>>)` to implement `diesel::Insertable<users::table>`
note: required by a bound in `IncompleteInsertStatement::<T, Op>::values`
  --> $DIESEL/src/query_builder/insert_statement/mod.rs
   |
   |     pub fn values<U>(self, records: U) -> InsertStatement<T, U::Values, Op>
   |            ------ required by a bound in this associated function
   |     where
   |         U: Insertable<T>,
   |            ^^^^^^^^^^^^^ required by this bound in `IncompleteInsertStatement::<T, Op>::values`
   = note: consider using `--verbose` to print the full type name to the console
   = note: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0271]: type mismatch resolving `<id as Column>::Source == table`
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:25:18
   |
25 |         .values(&(posts::id.eq(1), users::id.eq(2)));
   |          ------  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<id as Column>::Source == table`
   |          |
   |          required by a bound introduced by this call
   |
note: expected this to be `users::table`
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:14:9
   |
14 |         id -> Integer,
   |         ^^
   = note: `posts::table` and `users::table` have similar names, but are actually distinct types
note: `posts::table` is defined in module `crate::posts` of the current crate
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:12:1
   |
12 | / table! {
13 | |     posts {
14 | |         id -> Integer,
15 | |     }
16 | | }
   | |_^
note: `users::table` is defined in module `crate::users` of the current crate
  --> tests/fail/insert_cannot_reference_columns_from_other_table.rs:6:1
   |
6  | / table! {
7  | |     users {
8  | |         id -> Integer,
9  | |     }
10 | | }
   | |_^
   = note: required for `&diesel::expression::operators::Eq<posts::columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>` to implement `diesel::Insertable<users::table>`
   = note: 3 redundant requirements hidden
   = note: required for `&(Grouped<Eq<id, Bound<Integer, i32>>>, Grouped<Eq<id, Bound<Integer, i32>>>)` to implement `diesel::Insertable<users::table>`
note: required by a bound in `IncompleteInsertStatement::<T, Op>::values`
  --> $DIESEL/src/query_builder/insert_statement/mod.rs
   |
   |     pub fn values<U>(self, records: U) -> InsertStatement<T, U::Values, Op>
   |            ------ required by a bound in this associated function
   |     where
   |         U: Insertable<T>,
   |            ^^^^^^^^^^^^^ required by this bound in `IncompleteInsertStatement::<T, Op>::values`
   = note: consider using `--verbose` to print the full type name to the console
   = note: this error originates in the macro `table` (in Nightly builds, run with -Z macro-backtrace for more info)
